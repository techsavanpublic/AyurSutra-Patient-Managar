import React, { useState } from 'react';
// Importing icons from the 'react-icons' library
import { FiUser, FiPhone, FiLock, FiKey } from 'react-icons/fi';

// Main App component which contains the registration logic and UI
const Register = () => {
    // State to manage the current step of the registration process: 'register' or 'verify'
    const [step, setStep] = useState('register');

    // State to hold the data from the registration form
    const [formData, setFormData] = useState({
        username: '',
        phone: '',
        password: '',
        confirmPassword: ''
    });

    // State to store validation errors for the form fields
    const [errors, setErrors] = useState({});

    // State for the One-Time Password (OTP) entered by the user
    const [otp, setOtp] = useState('');
    
    // State to store the OTP generated by the system (for simulation purposes)
    const [generatedOtp, setGeneratedOtp] = useState('');

    // --- Event Handlers ---

    // Updates the formData state whenever an input field changes
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

    // Handles the submission of the main registration form
    const handleRegisterSubmit = (e) => {
        e.preventDefault();
        const validationErrors = validateForm();
        if (Object.keys(validationErrors).length === 0) {
            // If validation is successful, generate a 6-digit mock OTP
            const newOtp = Math.floor(100000 + Math.random() * 900000).toString();
            setGeneratedOtp(newOtp);
            
            // In a real application, you would send this OTP via an SMS service.
            // Here, we use an alert for demonstration.
            // NOTE: Using alert() is generally discouraged in production apps.
            // This is a placeholder for a proper notification system.
            alert(`✅ Mock OTP Sent!\nYour OTP is: ${newOtp}`);
            
            // Move to the OTP verification step
            setStep('verify'); 
        } else {
            // If there are validation errors, update the errors state
            setErrors(validationErrors);
        }
    };
    
    // Handles the submission of the OTP verification form
    const handleVerifySubmit = (e) => {
        e.preventDefault();
        if (otp === generatedOtp) {
            // On successful verification, save user data to local storage
            saveUserToLocalStorage();
            alert('🎉 Registration Successful! User details have been saved.');
            
            // Reset all state to allow for a new registration
            resetState();
        } else {
            +
            alert('❌ Invalid OTP. Please try again.');
        }
    };
    const validateForm = () => {
        let newErrors = {};
        if (!formData.username.trim()) newErrors.username = 'Username is required';
        if (!/^\d{10}$/.test(formData.phone)) newErrors.phone = 'Phone number must be exactly 10 digits';
        if (formData.password.length < 6) newErrors.password = 'Password must be at least 6 characters';
        if (formData.password !== formData.confirmPassword) newErrors.confirmPassword = 'Passwords do not match';
        
        return newErrors;
    };
    
    const saveUserToLocalStorage = () => {
        const existingUsers = JSON.parse(localStorage.getItem('users')) || [];
        
        const newUser = {
            username: formData.username,
            phone: formData.phone,
            // WARNING: In a real-world application, never store passwords in plain text!
            // Always hash and salt passwords on the backend before storing them.
            password: formData.password, 
        };
        
        // 3. Add the new user to the array of existing users
        const updatedUsers = [...existingUsers, newUser];
        
        // 4. Save the updated user array back to local storage
        localStorage.setItem('users', JSON.stringify(updatedUsers));
    };
    
    // Resets the component's state to its initial values
    const resetState = () => {
        setStep('register');
        setFormData({ username: '', phone: '', password: '', confirmPassword: '' });
        setErrors({});
        setOtp('');
        setGeneratedOtp('');
    };

    // --- Render Logic ---

    return (
        <div className="bg-gray-100 font-sans min-h-screen flex items-center justify-center p-4">
            <div className="w-full max-w-md">
                {/* Conditional rendering based on the current step */}
                {step === 'register' ? (
                    // Registration Form
                    <form className="bg-white p-8 rounded-2xl shadow-lg animate-fade-in" onSubmit={handleRegisterSubmit} noValidate>
                        <h2 className="text-3xl font-bold mb-2 text-center text-gray-800">Create Account</h2>
                        <p className="text-center text-gray-500 mb-8">Get started with your new account.</p>

                        {/* Username Input */}
                        <div className="relative mb-4">
                            <FiUser className="absolute top-1/2 -translate-y-1/2 left-4 text-gray-400" />
                            <input 
                                type="text" 
                                name="username" 
                                placeholder="Username"
                                value={formData.username} 
                                onChange={handleChange} 
                                className="w-full pl-12 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                            />
                        </div>
                        {errors.username && <p className="text-red-500 text-xs mt-[-8px] mb-4 ml-2">{errors.username}</p>}

                        {/* Phone Number Input */}
                        <div className="relative mb-4">
                            <FiPhone className="absolute top-1/2 -translate-y-1/2 left-4 text-gray-400" />
                            <input 
                                type="tel" 
                                name="phone" 
                                placeholder="10-digit Phone Number"
                                value={formData.phone} 
                                onChange={handleChange} 
                                className="w-full pl-12 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                            />
                        </div>
                        {errors.phone && <p className="text-red-500 text-xs mt-[-8px] mb-4 ml-2">{errors.phone}</p>}

                        {/* Password Input */}
                        <div className="relative mb-4">
                            <FiLock className="absolute top-1/2 -translate-y-1/2 left-4 text-gray-400" />
                            <input 
                                type="password" 
                                name="password" 
                                placeholder="Password"
                                value={formData.password} 
                                onChange={handleChange} 
                                className="w-full pl-12 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                            />
                        </div>
                        {errors.password && <p className="text-red-500 text-xs mt-[-8px] mb-4 ml-2">{errors.password}</p>}
                        
                        {/* Confirm Password Input */}
                        <div className="relative mb-6">
                            <FiLock className="absolute top-1/2 -translate-y-1/2 left-4 text-gray-400" />
                            <input 
                                type="password" 
                                name="confirmPassword"
                                placeholder="Confirm Password" 
                                value={formData.confirmPassword} 
                                onChange={handleChange}
                                className="w-full pl-12 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                            />
                        </div>
                        {errors.confirmPassword && <p className="text-red-500 text-xs mt-[-20px] mb-4 ml-2">{errors.confirmPassword}</p>}
                        
                        <button type="submit" className="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors duration-300">Register</button>
                    </form>
                ) : (
                    // OTP Verification Form
                    <form className="bg-white p-8 rounded-2xl shadow-lg animate-fade-in" onSubmit={handleVerifySubmit}>
                        <h2 className="text-3xl font-bold mb-2 text-center text-gray-800">Verify Phone</h2>
                        <p className="text-center text-gray-500 mb-6">An OTP has been sent to <span className="font-semibold text-gray-700">{formData.phone}</span></p>
                        
                        <div className="relative mb-6">
                            <FiKey className="absolute top-1/2 -translate-y-1/2 left-4 text-gray-400" />
                            <input 
                                type="text" 
                                name="otp" 
                                placeholder="Enter 6-digit OTP"
                                value={otp} 
                                onChange={(e) => setOtp(e.target.value)} 
                                maxLength="6"
                                className="w-full pl-12 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition tracking-[.5em] text-center"
                            />
                        </div>

                        <button type="submit" className="w-full bg-green-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-600 transition-colors duration-300">Verify OTP</button>
                    </form>
                )}
            </div>
        </div>
    );
}

export default Register;
